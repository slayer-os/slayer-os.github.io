name: Deploy Documentation

on:
  # Deploy on pushes to main branch
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
    branches:
      - main
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Important for changelog generation

      # Debug: Print directory structure to understand the repo layout
      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Checking for package.json files:"
          find . -name "package.json" -type f | sort
          echo "Checking for VitePress config files:"
          find . -name "config.mts" -o -name "config.ts" -o -name "config.js" | sort

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Set node version to 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Setup Pages
        uses: actions/configure-pages@v3

      # Create package.json if it doesn't exist
      - name: Create package.json if needed
        run: |
          if [ ! -f "package.json" ]; then
            echo "Creating package.json file"
            cat > package.json << EOF
          {
            "name": "slayer-os-docs",
            "version": "1.0.0",
            "description": "SlayerOS Documentation",
            "scripts": {
              "docs:dev": "vitepress dev site/docs",
              "docs:build": "vitepress build site/docs",
              "docs:preview": "vitepress preview site/docs"
            },
            "dependencies": {
              "vitepress": "^1.0.0-rc.40",
              "vue": "^3.3.11"
            }
          }
          EOF
          else
            echo "package.json already exists"
          fi

      # Install dependencies
      - name: Install dependencies
        run: bun install

      # Build documentation
      - name: Build documentation
        run: |
          # Try to find the VitePress config file to determine the correct path
          CONFIG_FILES=$(find . -name "config.mts" -o -name "config.ts" -o -name "config.js" | grep -i vitepress)
          
          if [ -n "$CONFIG_FILES" ]; then
            echo "Found VitePress config files:"
            echo "$CONFIG_FILES"
            
            # Extract the docs path from the first config file path
            CONFIG_PATH=$(echo "$CONFIG_FILES" | head -n 1)
            DOCS_PATH=$(dirname $(dirname "$CONFIG_PATH"))
            echo "Docs path appears to be: $DOCS_PATH"
            
            # Build using the detected path
            echo "Building VitePress site at $DOCS_PATH"
            bunx vitepress build "$DOCS_PATH"
          else
            echo "No VitePress config found, trying default paths"
            if [ -d "site/docs" ]; then
              echo "Building from site/docs"
              bunx vitepress build site/docs
            elif [ -d "docs" ]; then
              echo "Building from docs"
              bunx vitepress build docs
            else
              echo "Could not determine docs location"
              exit 1
            fi
          fi
        
      # Only run changelog and release steps when triggered by a tag
      - name: Update CHANGELOG
        if: startsWith(github.ref, 'refs/tags/')
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1.14.0
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changes }}
          token: ${{ github.token }}

      - name: Commit CHANGELOG.md
        if: startsWith(github.ref, 'refs/tags/')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: 'docs: update CHANGELOG.md for ${{ github.ref_name }} [skip ci]'
          file_pattern: CHANGELOG.md

      # Debug: Check the build output location
      - name: Check build output
        run: |
          echo "Checking possible build output locations:"
          find . -path "*/.vitepress/dist" -type d | sort

      # Create .nojekyll file and determine build directory
      - name: Setup build directory
        run: |
          # Find the VitePress dist directory
          DIST_DIRS=$(find . -path "*/.vitepress/dist" -type d | sort)
          
          if [ -n "$DIST_DIRS" ]; then
            # Use the first dist directory found
            BUILD_DIR=$(echo "$DIST_DIRS" | head -n 1)
            echo "Found build directory: $BUILD_DIR"
            
            # Create .nojekyll file
            touch "$BUILD_DIR/.nojekyll"
            
            # Export the build directory for later steps
            echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          else
            echo "Could not find any VitePress dist directory"
            exit 1
          fi

      # Deploy directly to main branch in a docs folder
      - name: Deploy to main branch docs folder
        run: |
          # Create a docs directory at the root of the repository
          mkdir -p docs
          
          # Copy the built files to the docs directory
          cp -r $BUILD_DIR/* docs/
          
          # Add .nojekyll file
          touch docs/.nojekyll
          
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Add and commit the changes
          git add docs/
          git commit -m "Update documentation" || echo "No changes to commit"
          
          # Push to main branch
          git push origin main
