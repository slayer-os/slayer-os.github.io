import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.DPDPlp3K.js";const k=JSON.parse('{"title":"Building SlayerOS","description":"","frontmatter":{},"headers":[],"relativePath":"guide/development/building.md","filePath":"guide/development/building.md"}'),l={name:"guide/development/building.md"};function n(h,i,o,r,d,p){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="building-slayeros" tabindex="-1">Building SlayerOS <a class="header-anchor" href="#building-slayeros" aria-label="Permalink to &quot;Building SlayerOS&quot;">​</a></h1><p>This guide explains how to build SlayerOS from source code. The build process creates a bootable ISO image that can be run in a virtual machine or installed on physical hardware.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>Before building SlayerOS, ensure you have the following tools installed:</p><ul><li><strong>GCC/G++</strong> (10.0 or newer) with x86_64 cross-compilation support</li><li><strong>NASM</strong> (Assembly compiler)</li><li><strong>xorriso</strong> (For creating ISO images)</li><li><strong>make</strong> (Build automation tool)</li><li><strong>git</strong> (Version control)</li><li><strong>qemu</strong> (For testing, optional)</li></ul><h3 id="ubuntu-debian" tabindex="-1">Ubuntu/Debian <a class="header-anchor" href="#ubuntu-debian" aria-label="Permalink to &quot;Ubuntu/Debian&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-essential</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xorriso</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qemu-system-x86</span></span></code></pre></div><h3 id="arch-linux" tabindex="-1">Arch Linux <a class="header-anchor" href="#arch-linux" aria-label="Permalink to &quot;Arch Linux&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libisoburn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qemu</span></span></code></pre></div><h3 id="macos-using-homebrew" tabindex="-1">macOS (using Homebrew) <a class="header-anchor" href="#macos-using-homebrew" aria-label="Permalink to &quot;macOS (using Homebrew)&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x86_64-elf-gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xorriso</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qemu</span></span></code></pre></div><h3 id="windows-using-wsl" tabindex="-1">Windows (using WSL) <a class="header-anchor" href="#windows-using-wsl" aria-label="Permalink to &quot;Windows (using WSL)&quot;">​</a></h3><p>Install WSL with Ubuntu, then follow the Ubuntu instructions above.</p><h2 id="getting-the-source-code" tabindex="-1">Getting the Source Code <a class="header-anchor" href="#getting-the-source-code" aria-label="Permalink to &quot;Getting the Source Code&quot;">​</a></h2><p>Clone the repository with submodules:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/slayer-os/SlayerOS.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SlayerOS</span></span></code></pre></div><p>If you already cloned without <code>--recursive</code>, initialize the submodules:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div><h2 id="build-process" tabindex="-1">Build Process <a class="header-anchor" href="#build-process" aria-label="Permalink to &quot;Build Process&quot;">​</a></h2><p>SlayerOS uses a Makefile-based build system with several targets:</p><h3 id="building-the-kernel" tabindex="-1">Building the Kernel <a class="header-anchor" href="#building-the-kernel" aria-label="Permalink to &quot;Building the Kernel&quot;">​</a></h3><p>To build just the kernel binary:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kernel</span></span></code></pre></div><p>This compiles the kernel source code and produces <code>build/slay.kernel</code>.</p><h3 id="building-the-iso" tabindex="-1">Building the ISO <a class="header-anchor" href="#building-the-iso" aria-label="Permalink to &quot;Building the ISO&quot;">​</a></h3><p>To build a bootable ISO image:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iso</span></span></code></pre></div><p>This builds the kernel, sets up the ISO directory structure with the Limine bootloader, and creates <code>build/slay.iso</code>.</p><h3 id="building-everything" tabindex="-1">Building Everything <a class="header-anchor" href="#building-everything" aria-label="Permalink to &quot;Building Everything&quot;">​</a></h3><p>To build everything (kernel, libraries, and ISO):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span></span></code></pre></div><h3 id="cleaning-the-build" tabindex="-1">Cleaning the Build <a class="header-anchor" href="#cleaning-the-build" aria-label="Permalink to &quot;Cleaning the Build&quot;">​</a></h3><p>To remove all build artifacts:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean</span></span></code></pre></div><h2 id="build-system-structure" tabindex="-1">Build System Structure <a class="header-anchor" href="#build-system-structure" aria-label="Permalink to &quot;Build System Structure&quot;">​</a></h2><p>The build system consists of several components:</p><h3 id="main-makefile" tabindex="-1">Main Makefile <a class="header-anchor" href="#main-makefile" aria-label="Permalink to &quot;Main Makefile&quot;">​</a></h3><p>The root <code>Makefile</code> coordinates the entire build process:</p><ul><li>Compiles the kernel source files</li><li>Builds the LibC and drivers libraries</li><li>Creates the ISO image with Limine</li></ul><h3 id="base-makefile-fragment" tabindex="-1">Base Makefile Fragment <a class="header-anchor" href="#base-makefile-fragment" aria-label="Permalink to &quot;Base Makefile Fragment&quot;">​</a></h3><p><code>misc/make/base.mk</code> defines common variables:</p><ul><li>Compiler and linker flags</li><li>Include paths</li><li>QEMU options for testing</li></ul><h3 id="linker-script" tabindex="-1">Linker Script <a class="header-anchor" href="#linker-script" aria-label="Permalink to &quot;Linker Script&quot;">​</a></h3><p><code>misc/linkage.ld</code> controls how the kernel is linked:</p><ul><li>Defines memory layout</li><li>Places sections (.text, .data, .bss)</li><li>Sets the entry point</li></ul><h2 id="custom-build-options" tabindex="-1">Custom Build Options <a class="header-anchor" href="#custom-build-options" aria-label="Permalink to &quot;Custom Build Options&quot;">​</a></h2><h3 id="debug-build" tabindex="-1">Debug Build <a class="header-anchor" href="#debug-build" aria-label="Permalink to &quot;Debug Build&quot;">​</a></h3><p>To build with debug symbols and assertions enabled:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DEBUG=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><h3 id="optimization-level" tabindex="-1">Optimization Level <a class="header-anchor" href="#optimization-level" aria-label="Permalink to &quot;Optimization Level&quot;">​</a></h3><p>To change the optimization level:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPT_LEVEL=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # No optimization (for debugging)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPT_LEVEL=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Default</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPT_LEVEL=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Maximum optimization</span></span></code></pre></div><h3 id="custom-qemu-options" tabindex="-1">Custom QEMU Options <a class="header-anchor" href="#custom-qemu-options" aria-label="Permalink to &quot;Custom QEMU Options&quot;">​</a></h3><p>To pass custom options to QEMU when testing:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> QEMU_EXTRA=&quot;-m 1G -smp 2&quot;</span></span></code></pre></div><h2 id="running-the-os" tabindex="-1">Running the OS <a class="header-anchor" href="#running-the-os" aria-label="Permalink to &quot;Running the OS&quot;">​</a></h2><h3 id="in-qemu" tabindex="-1">In QEMU <a class="header-anchor" href="#in-qemu" aria-label="Permalink to &quot;In QEMU&quot;">​</a></h3><p>To run the OS in QEMU after building:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre></div><h3 id="with-gdb-debugging" tabindex="-1">With GDB Debugging <a class="header-anchor" href="#with-gdb-debugging" aria-label="Permalink to &quot;With GDB Debugging&quot;">​</a></h3><p>To run with GDB debugging enabled:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug</span></span></code></pre></div><p>In another terminal:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdb</span></span></code></pre></div><h3 id="on-real-hardware" tabindex="-1">On Real Hardware <a class="header-anchor" href="#on-real-hardware" aria-label="Permalink to &quot;On Real Hardware&quot;">​</a></h3><p>To create a bootable USB drive (be careful with the device name):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=build/slay.iso</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of=/dev/sdX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bs=4M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status=progress</span></span></code></pre></div><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="common-build-issues" tabindex="-1">Common Build Issues <a class="header-anchor" href="#common-build-issues" aria-label="Permalink to &quot;Common Build Issues&quot;">​</a></h3><ol><li><p><strong>Missing dependencies</strong></p><ul><li>Error: <code>command not found</code></li><li>Solution: Install the missing tool</li></ul></li><li><p><strong>Submodule issues</strong></p><ul><li>Error: <code>No such file or directory: &#39;limine/limine-bios.sys&#39;</code></li><li>Solution: Run <code>git submodule update --init --recursive</code></li></ul></li><li><p><strong>Compilation errors</strong></p><ul><li>Check compiler version: <code>g++ --version</code></li><li>Ensure you have the correct cross-compiler if needed</li></ul></li><li><p><strong>ISO creation fails</strong></p><ul><li>Verify xorriso is installed</li><li>Check disk space</li></ul></li></ol><h3 id="getting-help" tabindex="-1">Getting Help <a class="header-anchor" href="#getting-help" aria-label="Permalink to &quot;Getting Help&quot;">​</a></h3><p>If you encounter issues not covered here:</p><ol><li>Check the GitHub repository issues</li><li>Join the community Discord</li><li>Open a new issue with detailed information about the problem</li></ol>`,73)]))}const c=s(l,[["render",n]]);export{k as __pageData,c as default};
