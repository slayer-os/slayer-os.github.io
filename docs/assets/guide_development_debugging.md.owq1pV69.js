import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.DPDPlp3K.js";const k=JSON.parse('{"title":"Debugging SlayerOS","description":"","frontmatter":{},"headers":[],"relativePath":"guide/development/debugging.md","filePath":"guide/development/debugging.md"}'),t={name:"guide/development/debugging.md"};function l(h,s,p,r,o,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="debugging-slayeros" tabindex="-1">Debugging SlayerOS <a class="header-anchor" href="#debugging-slayeros" aria-label="Permalink to &quot;Debugging SlayerOS&quot;">​</a></h1><p>This guide covers techniques and tools for debugging SlayerOS. Effective debugging is essential for kernel development, where traditional debugging methods may not be available.</p><h2 id="debugging-approaches" tabindex="-1">Debugging Approaches <a class="header-anchor" href="#debugging-approaches" aria-label="Permalink to &quot;Debugging Approaches&quot;">​</a></h2><p>SlayerOS supports several debugging approaches:</p><ol><li><strong>Serial Port Logging</strong>: Output debug messages via serial port</li><li><strong>GDB Remote Debugging</strong>: Connect GDB to QEMU for source-level debugging</li><li><strong>Core Dumps</strong>: Analyze memory dumps after crashes</li><li><strong>Assertions</strong>: Catch programming errors at runtime</li></ol><h2 id="serial-port-debugging" tabindex="-1">Serial Port Debugging <a class="header-anchor" href="#serial-port-debugging" aria-label="Permalink to &quot;Serial Port Debugging&quot;">​</a></h2><p>Serial port debugging is the most basic and reliable method for kernel debugging.</p><h3 id="enabling-serial-output" tabindex="-1">Enabling Serial Output <a class="header-anchor" href="#enabling-serial-output" aria-label="Permalink to &quot;Enabling Serial Output&quot;">​</a></h3><p>Serial output is enabled by default in <code>limine.conf</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SERIAL=yes</span></span></code></pre></div><h3 id="logging-functions" tabindex="-1">Logging Functions <a class="header-anchor" href="#logging-functions" aria-label="Permalink to &quot;Logging Functions&quot;">​</a></h3><p>The kernel provides several logging functions in <code>dbg/log.h</code>:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Log levels</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LOG_DEBUG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LOG_INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LOG_WARN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LOG_ERROR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LOG_FATAL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Logging functions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log_debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log_warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log_fatal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span></code></pre></div><p>Example usage:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;dbg/log.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initialize_device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Initializing device at 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, device_addr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">device_present</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Device not found!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Device initialized successfully&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="viewing-serial-output" tabindex="-1">Viewing Serial Output <a class="header-anchor" href="#viewing-serial-output" aria-label="Permalink to &quot;Viewing Serial Output&quot;">​</a></h3><p>When running in QEMU, use the <code>-serial stdio</code> option to redirect serial output to the terminal:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre></div><p>The Makefile already includes this option.</p><h2 id="gdb-remote-debugging" tabindex="-1">GDB Remote Debugging <a class="header-anchor" href="#gdb-remote-debugging" aria-label="Permalink to &quot;GDB Remote Debugging&quot;">​</a></h2><p>GDB allows source-level debugging of the kernel running in QEMU.</p><h3 id="starting-a-debug-session" tabindex="-1">Starting a Debug Session <a class="header-anchor" href="#starting-a-debug-session" aria-label="Permalink to &quot;Starting a Debug Session&quot;">​</a></h3><ol><li>Start QEMU with GDB server:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug</span></span></code></pre></div><ol start="2"><li>In another terminal, start GDB:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdb</span></span></code></pre></div><p>This connects GDB to the QEMU GDB server.</p><h3 id="common-gdb-commands" tabindex="-1">Common GDB Commands <a class="header-anchor" href="#common-gdb-commands" aria-label="Permalink to &quot;Common GDB Commands&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(gdb) break _start                # Set breakpoint at kernel entry</span></span>
<span class="line"><span>(gdb) break kernel.cxx:42         # Set breakpoint at line 42 in kernel.cxx</span></span>
<span class="line"><span>(gdb) continue                    # Continue execution</span></span>
<span class="line"><span>(gdb) step                        # Step into function</span></span>
<span class="line"><span>(gdb) next                        # Step over function</span></span>
<span class="line"><span>(gdb) print variable              # Print variable value</span></span>
<span class="line"><span>(gdb) info registers              # Show CPU registers</span></span>
<span class="line"><span>(gdb) x/10x 0x1000                # Examine 10 hex words at address 0x1000</span></span>
<span class="line"><span>(gdb) backtrace                   # Show call stack</span></span></code></pre></div><h3 id="debugging-with-symbols" tabindex="-1">Debugging with Symbols <a class="header-anchor" href="#debugging-with-symbols" aria-label="Permalink to &quot;Debugging with Symbols&quot;">​</a></h3><p>For effective debugging, ensure debug symbols are enabled:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DEBUG=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><h2 id="assertions" tabindex="-1">Assertions <a class="header-anchor" href="#assertions" aria-label="Permalink to &quot;Assertions&quot;">​</a></h2><p>Assertions help catch programming errors early by checking conditions that should always be true.</p><h3 id="using-assertions" tabindex="-1">Using Assertions <a class="header-anchor" href="#using-assertions" aria-label="Permalink to &quot;Using Assertions&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;libc/assert.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Verify preconditions</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Data pointer cannot be null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Size must be positive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Process data...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>When an assertion fails, it prints the error message and halts the kernel.</p><h2 id="memory-debugging" tabindex="-1">Memory Debugging <a class="header-anchor" href="#memory-debugging" aria-label="Permalink to &quot;Memory Debugging&quot;">​</a></h2><h3 id="heap-corruption" tabindex="-1">Heap Corruption <a class="header-anchor" href="#heap-corruption" aria-label="Permalink to &quot;Heap Corruption&quot;">​</a></h3><p>To debug heap corruption:</p><ol><li>Enable heap validation in <code>mem/heap.cxx</code>:</li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HEAP_VALIDATE</span></span></code></pre></div><ol start="2"><li>This adds checks before and after each allocation to detect buffer overflows.</li></ol><h3 id="memory-leaks" tabindex="-1">Memory Leaks <a class="header-anchor" href="#memory-leaks" aria-label="Permalink to &quot;Memory Leaks&quot;">​</a></h3><p>Track memory allocations by implementing a simple memory tracker:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> allocation_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// In a debug build, modify kmalloc/kfree to track allocations</span></span></code></pre></div><h2 id="elf-and-symbol-debugging" tabindex="-1">ELF and Symbol Debugging <a class="header-anchor" href="#elf-and-symbol-debugging" aria-label="Permalink to &quot;ELF and Symbol Debugging&quot;">​</a></h2><p>SlayerOS includes ELF parsing capabilities that can be used for debugging:</p><h3 id="symbol-resolution" tabindex="-1">Symbol Resolution <a class="header-anchor" href="#symbol-resolution" aria-label="Permalink to &quot;Symbol Resolution&quot;">​</a></h3><p>The <code>err/meta_resolver.cxx</code> file contains functions to resolve addresses to symbol names:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolve_symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uintptr_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>This is used for generating meaningful backtraces.</p><h2 id="debugging-boot-issues" tabindex="-1">Debugging Boot Issues <a class="header-anchor" href="#debugging-boot-issues" aria-label="Permalink to &quot;Debugging Boot Issues&quot;">​</a></h2><p>Boot problems can be particularly challenging to debug:</p><ol><li><strong>Enable verbose boot</strong>: Add <code>VERBOSE=yes</code> to <code>limine.conf</code></li><li><strong>Check memory map</strong>: Use <code>log_debug</code> to print the memory map early in boot</li><li><strong>Verify bootloader requests</strong>: Ensure all Limine requests are properly set up</li><li><strong>Single-step through initialization</strong>: Use GDB to step through the boot process</li></ol><h2 id="hardware-debugging" tabindex="-1">Hardware Debugging <a class="header-anchor" href="#hardware-debugging" aria-label="Permalink to &quot;Hardware Debugging&quot;">​</a></h2><p>For debugging hardware interaction:</p><ol><li><strong>I/O Port Monitoring</strong>: Use QEMU&#39;s <code>-d ioport</code> option</li><li><strong>Instruction Tracing</strong>: Use QEMU&#39;s <code>-d in_asm</code> option</li><li><strong>Memory Tracing</strong>: Use QEMU&#39;s <code>-d page</code> option</li></ol><p>Example:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">qemu-system-x86_64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cdrom</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/slay.iso</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -serial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stdio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ioport,in_asm</span></span></code></pre></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ol><li><strong>Log liberally</strong>: Add detailed logging, especially for initialization code</li><li><strong>Use assertions</strong>: Check preconditions and invariants</li><li><strong>Isolate problems</strong>: Test components individually when possible</li><li><strong>Incremental changes</strong>: Make small, testable changes</li><li><strong>Version control</strong>: Commit working versions before major changes</li></ol><h2 id="debugging-tools-reference" tabindex="-1">Debugging Tools Reference <a class="header-anchor" href="#debugging-tools-reference" aria-label="Permalink to &quot;Debugging Tools Reference&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Tool</th><th>Purpose</th><th>Command</th></tr></thead><tbody><tr><td>GDB</td><td>Source-level debugging</td><td><code>make gdb</code></td></tr><tr><td>QEMU Monitor</td><td>VM control and inspection</td><td>Press Ctrl+Alt+2 in QEMU</td></tr><tr><td>Serial Console</td><td>Kernel output</td><td>Built into <code>make run</code></td></tr><tr><td>Objdump</td><td>Disassemble kernel</td><td><code>objdump -d build/slay.kernel</code></td></tr><tr><td>Readelf</td><td>Examine ELF structure</td><td><code>readelf -a build/slay.kernel</code></td></tr></tbody></table>`,64)]))}const c=i(t,[["render",l]]);export{k as __pageData,c as default};
