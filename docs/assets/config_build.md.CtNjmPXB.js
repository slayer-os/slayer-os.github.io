import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"Build Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"config/build.md","filePath":"config/build.md"}'),e={name:"config/build.md"};function l(h,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="build-configuration" tabindex="-1">Build Configuration <a class="header-anchor" href="#build-configuration" aria-label="Permalink to &quot;Build Configuration&quot;">​</a></h1><p>This document explains the build configuration options available for SlayerOS. These settings control how the operating system is compiled and linked.</p><h2 id="makefile-options" tabindex="-1">Makefile Options <a class="header-anchor" href="#makefile-options" aria-label="Permalink to &quot;Makefile Options&quot;">​</a></h2><p>The main <code>Makefile</code> supports several variables that can be set to customize the build:</p><table tabindex="0"><thead><tr><th>Variable</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>DEBUG</code></td><td>Enable debug build</td><td>0 (disabled)</td></tr><tr><td><code>OPT_LEVEL</code></td><td>Optimization level (0-3)</td><td>2</td></tr><tr><td><code>WARNINGS</code></td><td>Warning level</td><td>all</td></tr><tr><td><code>QEMU_EXTRA</code></td><td>Extra QEMU options</td><td>(empty)</td></tr></tbody></table><h3 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build with debug symbols and no optimization</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DEBUG=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPT_LEVEL=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build with maximum optimization</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPT_LEVEL=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run with extra QEMU options</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> QEMU_EXTRA=&quot;-m 2G -smp 4&quot;</span></span></code></pre></div><h2 id="base-makefile-configuration" tabindex="-1">Base Makefile Configuration <a class="header-anchor" href="#base-makefile-configuration" aria-label="Permalink to &quot;Base Makefile Configuration&quot;">​</a></h2><p>The <code>misc/make/base.mk</code> file defines common build settings:</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Compiler selection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC = x86_64-elf-gcc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CXX = x86_64-elf-g++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LD = x86_64-elf-ld</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AS = nasm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Base flags</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CFLAGS = -ffreestanding -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OPT_LEVEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -Wall -Wextra -std=c11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CXXFLAGS = -ffreestanding -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OPT_LEVEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -Wall -Wextra -std=c++17 -fno-exceptions -fno-rtti</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LDFLAGS = -nostdlib</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ASFLAGS = -f elf64</span></span></code></pre></div><h2 id="compiler-flags" tabindex="-1">Compiler Flags <a class="header-anchor" href="#compiler-flags" aria-label="Permalink to &quot;Compiler Flags&quot;">​</a></h2><h3 id="c-c-compiler-flags" tabindex="-1">C/C++ Compiler Flags <a class="header-anchor" href="#c-c-compiler-flags" aria-label="Permalink to &quot;C/C++ Compiler Flags&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Flag</th><th>Description</th></tr></thead><tbody><tr><td><code>-ffreestanding</code></td><td>Compile for a freestanding environment (no standard library)</td></tr><tr><td><code>-O$(OPT_LEVEL)</code></td><td>Optimization level</td></tr><tr><td><code>-Wall -Wextra</code></td><td>Enable comprehensive warnings</td></tr><tr><td><code>-std=c++17</code></td><td>Use C++17 standard</td></tr><tr><td><code>-fno-exceptions</code></td><td>Disable C++ exceptions</td></tr><tr><td><code>-fno-rtti</code></td><td>Disable runtime type information</td></tr><tr><td><code>-g</code></td><td>Include debug symbols (when DEBUG=1)</td></tr><tr><td><code>-D_DEBUG</code></td><td>Define _DEBUG macro (when DEBUG=1)</td></tr></tbody></table><h3 id="assembler-flags" tabindex="-1">Assembler Flags <a class="header-anchor" href="#assembler-flags" aria-label="Permalink to &quot;Assembler Flags&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Flag</th><th>Description</th></tr></thead><tbody><tr><td><code>-f elf64</code></td><td>Output ELF64 format</td></tr></tbody></table><h3 id="linker-flags" tabindex="-1">Linker Flags <a class="header-anchor" href="#linker-flags" aria-label="Permalink to &quot;Linker Flags&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Flag</th><th>Description</th></tr></thead><tbody><tr><td><code>-nostdlib</code></td><td>Don&#39;t use standard system startup files or libraries</td></tr><tr><td><code>-T $(LINKER_SCRIPT)</code></td><td>Use the specified linker script</td></tr></tbody></table><h2 id="linker-script" tabindex="-1">Linker Script <a class="header-anchor" href="#linker-script" aria-label="Permalink to &quot;Linker Script&quot;">​</a></h2><p>The <code>misc/linkage.ld</code> script controls how the kernel is linked:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SECTIONS</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    . = KERNEL_VIRT_BASE + KERNEL_PHYS_BASE;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    .text : AT(ADDR(.text) - KERNEL_VIRT_BASE)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        *(.text*)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    /* Other sections... */</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Key aspects of the linker script:</p><ul><li>Places the kernel at the correct virtual address</li><li>Organizes sections (.text, .rodata, .data, .bss)</li><li>Sets up the entry point (_start)</li></ul><h2 id="iso-configuration" tabindex="-1">ISO Configuration <a class="header-anchor" href="#iso-configuration" aria-label="Permalink to &quot;ISO Configuration&quot;">​</a></h2><p>The ISO build process is configured in the Makefile:</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISO_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LIMINE_BIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KERNEL_BIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	mkdir -p </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISO_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/boot/limine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	mkdir -p </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISO_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/EFI/BOOT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	cp </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KERNEL_BIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISO_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/boot/slay.kernel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	cp -v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LIMINE_CFG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LIMINE_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/limine-bios.sys </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LIMINE_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/limine-bios-cd.bin </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LIMINE_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/limine-uefi-cd.bin </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISO_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/boot/limine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	cp -v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LIMINE_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/BOOTX64.EFI </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LIMINE_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/BOOTIA32.EFI </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISO_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/EFI/BOOT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	xorriso -as mkisofs -b boot/limine/limine-bios-cd.bin </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		-no-emul-boot -boot-load-size 4 -boot-info-table </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		--efi-boot boot/limine/limine-uefi-cd.bin </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		-efi-boot-part --efi-boot-image --protective-msdos-label </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISO_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -o </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LIMINE_BIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bios-install </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span></span></code></pre></div><h2 id="customizing-the-build" tabindex="-1">Customizing the Build <a class="header-anchor" href="#customizing-the-build" aria-label="Permalink to &quot;Customizing the Build&quot;">​</a></h2><h3 id="adding-new-source-files" tabindex="-1">Adding New Source Files <a class="header-anchor" href="#adding-new-source-files" aria-label="Permalink to &quot;Adding New Source Files&quot;">​</a></h3><p>When adding new source files, the build system automatically detects them:</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SOURCE_FILES = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shell</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KERNEL_SRC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) -name &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.cxx&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OBJECT_FILES = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">patsubst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KERNEL_SRC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.cxx,$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OBJ_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.o,$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SOURCE_FILES</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">))</span></span></code></pre></div><h3 id="adding-new-include-directories" tabindex="-1">Adding New Include Directories <a class="header-anchor" href="#adding-new-include-directories" aria-label="Permalink to &quot;Adding New Include Directories&quot;">​</a></h3><p>To add a new include directory:</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">INCLUDES += -I/path/to/new/include</span></span></code></pre></div><h3 id="creating-custom-build-targets" tabindex="-1">Creating Custom Build Targets <a class="header-anchor" href="#creating-custom-build-targets" aria-label="Permalink to &quot;Creating Custom Build Targets&quot;">​</a></h3><p>You can add custom build targets to the Makefile:</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">custom_target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KERNEL_BIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">echo &quot;Running custom build steps...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	# Custom commands here</span></span></code></pre></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ol><li>Use <code>make clean</code> before changing build options</li><li>Start with debug builds during development</li><li>Use optimized builds for performance testing</li><li>Document any custom build configurations</li><li>Use version control to track build configuration changes</li></ol>`,37)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
